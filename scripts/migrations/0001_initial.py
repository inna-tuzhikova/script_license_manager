# Generated by Django 5.0.2 on 2024-02-19 13:11
from pathlib import Path

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.core.management import call_command


def load_initial_cats(apps, schema_editor):
    call_command('loaddata', 'scripts/categories.yaml')


def load_initial_tags(apps, schema_editor):
    call_command('loaddata', 'scripts/tags.yaml')


def load_initial_groups(apps, schema_editor):
    call_command('loaddata', 'scripts/groups.yaml')


def set_initial_permissions(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Script = apps.get_model('scripts', 'Script')

    content_type = ContentType.objects.get_for_model(Script)
    perm_plain, created = Permission.objects.get_or_create(
        codename='force_issue_plain_script',
        name='Can generate non encoded script ignoring script specification',
        content_type=content_type
    )
    perm_enc, created = Permission.objects.get_or_create(
        codename='force_issue_encoded_script',
        name='Can generate encoded script ignoring script specification',
        content_type=content_type
    )
    dev = Group.objects.get(pk=2)
    dev.permissions.add(perm_plain)
    dev.permissions.add(perm_enc)


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True,
                                           serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True,
                                        serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=1000)),
                ('parent', models.ForeignKey(null=True,
                                             on_delete=django.db.models.deletion.CASCADE,
                                             to='scripts.category')),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True,
                                        serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=1000)),
                ('enabled', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('extra_params_schema',
                 models.JSONField(default=None, null=True)),
                ('allow_issue_plain', models.BooleanField(default=False)),
                ('allow_issue_encoded', models.BooleanField(default=True)),
                ('allow_issue_encoded_lk', models.BooleanField(default=True)),
                ('allow_issue_encoded_exp', models.BooleanField(default=True)),
                ('allow_issue_encoded_lk_exp',
                 models.BooleanField(default=True)),
                ('category',
                 models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,
                                   to='scripts.category')),
                ('tags', models.ManyToManyField(to='scripts.tag')),
            ],
            options={
                'ordering': ['name'],
                'permissions': [('force_issue_plain_script',
                                 'Can generate non encoded script ignoring script specification'),
                                ('force_issue_encoded_script',
                                 'Can generate encoded script ignoring script specification')],
            },
        ),
        migrations.CreateModel(
            name='IssuedLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True,
                                           serialize=False, verbose_name='ID')),
                ('issued_at', models.DateTimeField()),
                ('license_key', models.CharField()),
                ('issue_type', models.CharField(
                    choices=[('PLAIN', 'Script without encoding'),
                             ('ENCODED', 'Encoded script'), (
                             'ENCODED_LK', 'Script encoded with a license key'),
                             ('ENCODED_EXP',
                              'Script encoded with an expiration date'), (
                             'ENCODED_EXP_LK',
                             'Script encoded with a license key and expiration date')])),
                ('action', models.CharField(
                    choices=[('GENERATE', 'Generate script'),
                             ('UPDATE', 'Update issued script license')])),
                ('demo_lk', models.BooleanField()),
                ('expires', models.DateField(null=True)),
                ('extra_params', models.JSONField(null=True)),
                ('issued_by', models.ForeignKey(null=True,
                                                on_delete=django.db.models.deletion.CASCADE,
                                                to=settings.AUTH_USER_MODEL)),
                ('script',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   to='scripts.script')),
            ],
            options={
                'db_table': 'scripts_issued_license',
                'ordering': ['-issued_at'],
            },
        ),
        migrations.RunPython(code=load_initial_cats),
        migrations.RunPython(code=load_initial_tags),
        migrations.RunPython(code=load_initial_groups),
        migrations.RunPython(code=set_initial_permissions),
    ]
